{"version":3,"sources":["components/LoadingComponent.js","components/RenderSongs.js","redux/ActionCreators.js","redux/ActionTypes.js","components/MainComponent.js","redux/songs.js","App.js","redux/configureStore.js","serviceWorker.js","index.js"],"names":["Loading","id","type","color","height","width","RenderSong","props","state","hover","btnhover","toggleHover","bind","togglebtnHover","this","setState","cardcss","opacity","btncss","position","top","display","transition","className","Card","onMouseEnter","onMouseLeave","CardImg","src","song","img","alt","name","style","CardBody","CardTitle","Button","href","song_url","target","Component","Songs","songs","map","isLoading","errMess","SongsFailed","errmess","payload","addSongs","Header","Footer","Main","fetchSongs","withRouter","connect","dispatch","fetch","then","response","ok","error","Error","status","statusText","message","json","catch","action","store","createStore","combineReducers","applyMiddleware","thunk","logger","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.995daadd.chunk.js","sourcesContent":["import Loader from 'react-loader-spinner'\nimport React from 'react';\n\nconst Loading = () => {\n    return(\n        <div id=\"loader\">\n            <Loader type=\"Bars\" color=\"#00BFFF\" height={80} width={80}/>\n            <p>Loading</p>\n        </div>\n    );\n};\n\nexport default Loading;","import React, { Component } from 'react';\nimport Loading from './LoadingComponent';\nimport { Card, CardImg, CardBody, CardTitle, Button } from 'reactstrap';\n\nclass RenderSong extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hover: false,\n            btnhover: false\n        };\n        this.toggleHover = this.toggleHover.bind(this);\n        this.togglebtnHover = this.togglebtnHover.bind(this);\n    }\n    toggleHover() {\n        this.setState({\n            hover: !this.state.hover\n        });\n    }\n    togglebtnHover() {\n        this.setState({\n            btnhover: !this.state.btnhover\n        });\n    }\n    render() {\n        var cardcss = { opacity: '1' };\n        var btncss = { position: 'absolute', top: '35%', 'background-color': '#000000', display: 'none', 'border-radius': '2rem' }\n        if (this.state.hover) {\n            btncss.display = 'inline';\n            cardcss.opacity = '0.4';\n            cardcss.transition = '0.5s ease-in-out';\n        }\n        if (this.state.btnhover) {\n            btncss['background-color'] = 'green';\n            btncss.transition = '0.2s ease-in-out';\n        }\n        return (\n            <div className=\"col-6 col-md-2\">\n                <Card id=\"card\" onMouseEnter={this.toggleHover} onMouseLeave={this.toggleHover} >\n                    <CardImg top src={this.props.song.img} alt={this.props.song.name} height=\"75%\" style={cardcss} />\n                    <CardBody>\n                        <CardTitle id=\"songtitle\">{this.props.song.name}</CardTitle>\n                        <Button style={btncss} onMouseLeave={this.togglebtnHover} onMouseEnter={this.togglebtnHover}><a href={this.props.song.song_url} id=\"listen\" target=\"_blank\">Listen On &ensp;<i className=\"fa fa-spotify\"></i> Spotify</a></Button>\n                    </CardBody>\n                </Card>\n            </div>\n        );\n    }\n}\n\n\nconst Songs = (props) => {\n    const songs = props.songs.songs.map((song) => {\n        return (\n            <RenderSong song={song} />\n        );\n    });\n    if (props.songs.isLoading) {\n        return (\n            <div className=\"container\">\n                <div className=\"row justify-content-center\">\n                    <Loading />\n                </div>\n            </div>\n        );\n    }\n    else if (props.songs.errMess) {\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <h4>{props.songs.errMess}</h4>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n    else\n        return (\n            <div className=\"container-fluid\">\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <h3>Friday July 31st</h3>\n                        <hr />\n                    </div>\n                </div>\n                <div className=\"row\">\n                    {songs}\n                </div>\n            </div>\n        );\n}\n\nexport default Songs;","import * as ActionTypes from './ActionTypes';\n\nexport const fetchSongs = () => (dispatch) => {\n    return fetch('https://api.npoint.io/3afc6c645a96f8d71317')\n        .then(response => {\n            if (response.ok) {\n                return response;\n            }\n            else {\n                var error = new Error('Error ' + response.status + ': ' + response.statusText);\n                error.response = response;\n                throw error;\n            }\n        },\n        error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n        })\n        .then(response => response.json())\n        .then(Songs => dispatch(addSongs(Songs)))\n        .catch(error => dispatch(SongsFailed(error.message)));\n}\n\nexport const SongsFailed = (errmess) => ({\n    type: ActionTypes.SONGS_FAILED,\n    payload: errmess\n});\n\nexport const addSongs = (Songs) => ({\n    type: ActionTypes.ADD_SONGS,\n    payload: Songs\n});","export const ADD_SONGS = 'ADD_SONGS';\nexport const SONGS_FAILED = 'SONGS_FAILED';","import React, { Component } from 'react';\nimport Loading from './LoadingComponent';\nimport Songs from './RenderSongs'\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { fetchSongs } from '../redux/ActionCreators';\n\nconst mapStateToProps = state => {\n    return {\n      songs: state.songs\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n    fetchSongs: () => {dispatch(fetchSongs())}\n  });\n\n\nfunction Header() {\n    return (\n        <div className=\"container-fluid p-3\" id=\"heading\">\n            <div className=\"row justify-content-center\">\n                <h1>New EDM Friday</h1>\n            </div>\n        </div>\n    );\n}\n\nfunction Footer() {\n    return(\n        <div className=\"footer mt-5\">\n            <div className=\"container\">\n                <div className=\"row justify-content-center\">\n                    <div className=\"col-12\">\n                        <div className=\"text-center\">\n                            <h5>Socials</h5>\n                            <a className=\"fa fa-facebook\" href=\"https://www.facebook.com/bhubhanshu.gurjar\"></a> &nbsp;\n                            <a className=\"fa fa-linkedin\" href=\"https://www.linkedin.com/in/bhubhanshu/\"></a> &nbsp;\n                            <a className=\"fa fa-github\" href=\"https://www.github.com/bhubhanshu/\"></a> &nbsp;\n                        </div>\n                    </div>\n                </div>\n                <hr></hr>\n                <div className=\"row justify-content-center\">             \n                    <div className=\"col-auto\">\n                        <h5>© Copyright 2020 Bhubhanshu Gurjar</h5>\n                    </div>\n                </div>\n                <div className=\"row justify-content-center\">             \n                    <div className=\"col-auto\">\n                        <h5>Built using ReactJS</h5>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nclass Main extends Component {\n    componentDidMount() {\n        this.props.fetchSongs();\n    }\n    render() {\n        return( \n            <div id=\"body\">\n                <Header />\n                <Songs songs={this.props.songs} />\n                <Footer />\n            </div>\n        );\n    }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Main));","import * as ActionTypes from './ActionTypes';\n\nexport const Songs = (state = {\n        isLoading: true,\n        errMess: null,\n        songs: []\n    }, action) => {\n    switch(action.type) {\n        case ActionTypes.ADD_SONGS:\n            return {...state, isLoading: false, errMess: null, songs: action.payload};\n\n        case ActionTypes.SONGS_FAILED:\n            return {...state, isLoading: false, errMess: action.payload, songs: []};\n            \n        default:\n            return state;\n    }\n}","import React from 'react';\nimport './App.css';\nimport Main from './components/MainComponent';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { ConfigureStore } from './redux/configureStore';\nconst store = ConfigureStore();\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <BrowserRouter>\n        <div>\n          <Main />\n        </div>\n      </BrowserRouter>\n    </Provider>\n  );\n}\n\nexport default App;\n","import { createStore, combineReducers, applyMiddleware } from 'redux'\nimport { Songs } from './songs';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\n\nexport const ConfigureStore = () => {\n    const store = createStore(\n        combineReducers({\n            songs: Songs,\n        }),\n        applyMiddleware(thunk, logger)\n    );\n\n    return store;\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}